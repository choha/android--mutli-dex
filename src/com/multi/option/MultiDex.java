package com.multi.option;import java.io.File;import java.io.FileInputStream;import java.io.FileOutputStream;import java.io.InputStream;import java.lang.reflect.Array;import java.lang.reflect.Field;import java.util.ArrayList;import android.content.Context;import android.util.Log;import dalvik.system.DexClassLoader;import dalvik.system.PathClassLoader;/** * 建议在Application的oncreate中调用 *  * 加载 dex文件夹，并设置到主classloader中 *  * @author shehonghao *  */public class MultiDex {    /**     * dex文件复制到data/data/packages/files/目录下的文件夹名称     */    private static final String DEX_FILE_PATH = "dex/";    /**     * 复制到data/data/packages/files/dex/目录下的文件名称前缀     */    private static final String dexFilePre = "classes";    private ArrayList<DexPath> dexPathList;    private static MultiDex mInstance;    private static final String TAG = "tag_she-----";    private boolean is_debug = true;    private MultiDex() {        dexPathList = new ArrayList<DexPath>();    }    public void setIsDebug(boolean flag) {        is_debug = flag;    }    /**     * step 1： 初始化     *      * @return     */    public static MultiDex getInstance() {        if (mInstance == null) {            mInstance = new MultiDex();        }        return mInstance;    }    /**     * step 2:初始化 dex做在位置     *      * @param dex     */    public void addDexPath(DexPath dex) {        if (dex == null || dex.isEmpty()) {            throw new IllegalArgumentException("dex 对象不能null或者DexPath.srcDexPatch 不你能为空");        }        dexPathList.add(dex);    }    /**     * step 3: 加载dex文件     *      * @param context     */    public boolean loadMultiDex(Context context) {        if (dexPathList.size() == 0) {            if (is_debug) {                Log.d(TAG, "没有设置任何需要加载的dex文件,见：addDexPath(DexPath dex) ");            }            return false;        }        String[] dexFilePath = new String[dexPathList.size()];        // 获取data/data/packages/files/dex目录，所有拆分dex都将copy到该目录中        String rootPaString = context.getFilesDir().getPath() + File.separator + DEX_FILE_PATH;        File rootDex = new File(rootPaString);        // 如果目录不存在，则创建        if (!rootDex.exists()) {            if (!rootDex.mkdir()) {                if (is_debug) {                    Log.d(TAG, "创建路径 " + rootPaString + "--失败->");                }                return false;            }        }        Object[] allDexElements = new Object[dexPathList.size() + 1];        PathClassLoader pathClassLoader = (PathClassLoader) context.getClassLoader();        Object[] elementList = null;        int dexNum = 0;        // 主类加载器，加载到的dex文件，保证主dex，在第一个        allDexElements[0] = getDexElementsByReflect(getPathListByReflect(pathClassLoader));        if (allDexElements[0] != null) {            elementList = (Object[]) allDexElements[0];            dexNum = elementList.length;        }        // 赋值文件        for (int i = 0; i < dexPathList.size(); i++) {            dexFilePath[i] = rootPaString + dexFilePre + i + ".dex";            // 一个copy失败，将不继续，理论一个失败，应该都会失败            if (!copyDexPath2Files(context, dexPathList.get(i), dexFilePath[i])) {                Log.e(TAG, "赋值文件失败");                return false;            }            // dex文件            allDexElements[i + 1] = loadDex(context, dexFilePath[i], pathClassLoader);            if (allDexElements[i] != null) {                elementList = (Object[]) allDexElements[i + 1];                // 统计总共所有多个dex                dexNum = dexNum + elementList.length;            } else {                if (is_debug) {                    Log.w(TAG, "路径--》" + dexFilePath[i] + " 加载到任何的class,请确认文件格式是否正确");                }            }        }        if (is_debug) {            Log.d(TAG, "总共加载到dex文件的数量---》" + dexNum);        }        // 合并所有的dex文件        Object array = createObjectTypeArray(allDexElements[0].getClass(), dexNum);        Object[] list = (Object[]) array;        dexNum = 0;        for (int i = 0; i < allDexElements.length; i++) {            if (allDexElements[i] != null) {                elementList = (Object[]) allDexElements[i];                System.arraycopy(elementList, 0, list, dexNum, elementList.length);                dexNum = dexNum + elementList.length;            }        }        Object pathList = getPathListByReflect(pathClassLoader);        //        setFieldByReflect(pathList, pathList.getClass(), "dexElements", list);        return true;    }    /**     * 复制dex文件     *      * @param context     * @param path     * @param disFilePath     * @return     */    private boolean copyDexPath2Files(Context context, DexPath path, String disFilePath) {        InputStream is = null;        FileOutputStream fos = null;        try {            if (path.isAssent()) {                is = context.getAssets().open(path.getSrcDexPatch());            } else {                File file = new File(path.getSrcDexPatch());                is = new FileInputStream(file);            }            fos = new FileOutputStream(disFilePath);            return FileUtils.copyFile(is, fos);        } catch (Exception e) {            e.printStackTrace();            return false;        }    }    /**     * 加载 指定dex到内存中     *      * @param context     * @param dexPath     * @param pathClassLoader     * @return     */    private Object loadDex(Context context, String dexPath, PathClassLoader pathClassLoader) {        // 加载指定路径的dex文件        DexClassLoader dexClassLoader =                new DexClassLoader(dexPath, context.getDir("dex", 0).getAbsolutePath(), dexPath, pathClassLoader);        // 反射获取DexClasLoader的pathList属性        Object classLoaderPathList = getPathListByReflect(dexClassLoader);        if (classLoaderPathList == null) {            if (is_debug) {                Log.e(TAG, "路径--》" + dexPath + " 加载到任何的class,请确认文件格式是否正确");            }            return null;        }        // 反射获取dalvik.system.DexPathList的dexElements熟悉        return getDexElementsByReflect(classLoaderPathList);    }    private boolean setFieldByReflect(Object pathList, Class class1, String filename, Object valuse) {        try {            Field f = class1.getDeclaredField(filename);            f.setAccessible(true);            f.set(pathList, valuse);        } catch (Exception e) {            e.printStackTrace();            return false;        }        return true;    }    /**     * 创建dalvik.system.DexPathList#Element 数组     *      * @param oldArray 原始数组     * @param addLength 需要增加的长队     * @return     */    public static Object createObjectTypeArray(Class c, int length) {        if (!c.isArray())            return null;        Class componentType = c.getComponentType();        Object newArray = Array.newInstance(componentType, length);        return newArray;    }    private Object getDexElementsByReflect(Object pathList) {        // TODO Auto-generated method stub dexElements        return getFilesByReflect(pathList, "dexElements");    }    private Object getPathListByReflect(Object pathClassLoader) {        return getFilesFromBaseDexClassLoader(pathClassLoader, "pathList");    }    private Object getFilesByReflect(Object pathClassLoader, String fieldName) {        Class c = pathClassLoader.getClass();        // Log.e("tag_she", "----->" + c.getName());        try {            Field a = c.getDeclaredField(fieldName);            a.setAccessible(true);            return a.get(pathClassLoader);        } catch (NoSuchFieldException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (IllegalArgumentException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (IllegalAccessException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (Exception e) {            e.printStackTrace();        }        return null;    }    private Object getFilesFromBaseDexClassLoader(Object pathClassLoader, String fieldName) {        Class c;        try {            c = Class.forName("dalvik.system.BaseDexClassLoader");            // Log.e("tag_she", "----->" + c.getName());            try {                Field a = c.getDeclaredField(fieldName);                a.setAccessible(true);                return a.get(pathClassLoader);            } catch (NoSuchFieldException e) {                // TODO Auto-generated catch block                e.printStackTrace();            } catch (IllegalArgumentException e) {                // TODO Auto-generated catch block                e.printStackTrace();            } catch (IllegalAccessException e) {                // TODO Auto-generated catch block                e.printStackTrace();            } catch (Exception e) {                e.printStackTrace();            }        } catch (ClassNotFoundException e1) {            // TODO Auto-generated catch block            e1.printStackTrace();        }        return null;    }}